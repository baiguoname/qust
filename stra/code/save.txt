let stral = {
    let mut stral = Stral(vec![]);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0008810624f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.001945544f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.002202062f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0013259919f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0016419702f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0008810624f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.001945544f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.002202062f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0013259919f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0016419702f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, OIer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.03329928f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.014537302f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.014730842f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.025632916f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.05534691f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.03329928f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.014537302f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.014730842f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.025632916f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.05534691f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, RMer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0056764097f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.02221677f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0056764097f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.02221677f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, SFer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.052361667f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009857621f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01094516f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004681792f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0054152296f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.022013316f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040845475f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009434283f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.052361667f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009857621f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01094516f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004681792f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0054152296f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.022013316f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040845475f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009434283f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, SMer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.029064093f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.06259822f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009622455f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.030717395f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.029064093f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.06259822f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009622455f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.030717395f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, SRer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009028556f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.038645104f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.021435166f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004695435f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.023466654f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.011590741f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0034302287f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.026429987f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0060192537f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.028321665f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.009028556f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.038645104f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.021435166f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004695435f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.023466654f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.011590741f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0034302287f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.026429987f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0060192537f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.028321665f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, aer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0013388247f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0014499045f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0011602836f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0006163533f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0007191532f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005218279f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00057637907f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.000528553f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005148068f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004798726f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005999242f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040774746f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004332811f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00067739736f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0046291207f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0013388247f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0014499045f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0011602836f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0006163533f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0007191532f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005218279f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00057637907f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.000528553f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005148068f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004798726f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0005999242f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040774746f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.004332811f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00067739736f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0046291207f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, aler);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0033832404f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0006137426f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0038377007f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00043156496f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00046651432f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0019959125f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00041769678f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00039753818f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0021015725f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.000780878f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00036490615f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0003441754f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0012027927f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00092688814f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.002543224f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0008580543f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0033832404f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0006137426f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(1, 20), Rank(400, 100)), ori), range: 50f32 .. 70f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0038377007f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00043156496f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00046651432f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0019959125f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00041769678f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00039753818f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0021015725f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 40f32 .. 60f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.000780878f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00036490615f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0003441754f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0012027927f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Spread(20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.00092688814f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.002543224f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(EffRatio(2, 20), Rank(400, 100)), ori), range: 30f32 .. 50f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0008580543f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, cuer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0028111218f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.008794301f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0033233655f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0032672903f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.015836373f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0028111218f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.008794301f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0033233655f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0032672903f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.015836373f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, eber);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0045514368f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0032769125f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.003760027f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.021782296f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040786345f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01889119f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.028296327f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0045514368f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Jta(5, 5, 5), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0032769125f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.003760027f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Rsi(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.021782296f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Dta(15, 15, 15), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.0040786345f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01889119f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(RollTa(KlineType::Close, RollFunc::Skewness, RollOps::N(5)), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, KDayRatio(20), ori), range: 0f32 .. 85f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.028296327f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, eger);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
        let stra = {
    let ptm = {
        let (wcond1, wcond2) = ({let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01800075f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    }, {let mut cond_weight = CondWeight(vec![]);
        let cond_weight_ = {
            let msig_cond = {let iocond1 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Macd(10, 20, 20), Rank(400, 100)), ori), range: 0f32 .. 20f32 }; 
let iocond2 = Iocond { pms: crate::pms!(crate::dcon!(ori, DAYK.clone()), ono, crate::fore_ta!(Atr(20), Rank(400, 100)), ori), range: 80f32 .. 100f32 }; 

    crate::msig!(and, iocond1, iocond2)};
            let msig_cond_box: Box<dyn Cond> = Box::new(msig_cond);
            let k = 0.01800075f32;
            (msig_cond_box, k)
        };
        cond_weight.0.push(cond_weight_);
        
    cond_weight
    });
        c71::PTM.clone().get_cond3((&wcond1, &wcond2))
    };
    let inter_box: InterBox = Box::new(Rl5m_cut);
    let di_name = DiName(inter_box, fuer);
    Stra(di_name, ptm)
    };
        stral.0.push(stra);
    
    stral
    };